version: "3.8"

services:
  db:
    image: postgres:16-alpine
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      # - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - database_net

  # TODO: Make the backend installs its dependencies and then run the frontend
  backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile
      # dockerfile: dockerfiles/${NODE_ENV}.Dockerfile
    container_name: backend
    restart: always
    # env_file: .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEST_PORT=${NEST_PORT}
      - FRONTEND=${FRONTEND}
      - DATABASE_URL=${DATABASE_URL}
      - FT_CLIENT_ID=${FT_CLIENT_ID}
      - FT_CLIENT_SECRET=${FT_CLIENT_SECRET}
      - FT_REDIRECT_URI=${FT_REDIRECT_URI}
      - FT_PROFILE_URL=${FT_PROFILE_URL}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_VERIFY_SERVICE_SID=${TWILIO_VERIFY_SERVICE_SID}
    ports:
      - "${NEST_PORT:-3000}:${NEST_PORT:-3000}"
      - "5555:5555"
    volumes:
      - ./backend:/app # for hot reloading
      # - /app/node_modules # for faster builds
      # - /app/dist
    networks:
      - database_net
      - frontend_net
    depends_on:
      - db
    command:
      - sh
      - -c
      - |
        npm install
        npm run prisma
        npm run start:dev

  frontend:
    build:
      context: ./frontend/
      dockerfile: Dockerfile
      # target: dev # used with command: npm run dev
    container_name: frontend
    restart: always
    ports:
      - "${NEXT_PORT:-3001}:${NEXT_PORT:-3001}"
    environment:
      - NEXT_PORT=${NEXT_PORT}
      - BACKEND=${BACKEND}
      - DOMAIN_NAME=${DOMAIN_NAME}
    volumes:
      - ./frontend:/app # for hot reloading
      # - /app/node_modules # for faster builds
      # - /app/.next
    networks:
      - frontend_net
    depends_on:
      - backend
    command:
      - sh
      - -c
      - |
        npm install
        npm run dev

volumes:
  db-data:

networks:
  database_net:
    driver: bridge
  frontend_net:
    driver: bridge
