// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String?  @unique @default(uuid())
  email     String   @unique
  // password         String
  // avatar           String?  @default("https://i.imgur.com/6VBx3io.png")
  // status           String?  @default("offline")
  // twoFactorEnabled Boolean  @default(false)
  // twoFactorSecret  String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  friends                Friend[]
  friendRequestsSent     FriendRequest[] @relation("SentFriendRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedFriendRequests")
  //   followedBy Follows[] @relation("following")
  //   following  Follows[] @relation("follower")

  settings UserSettings?
}

// model Follows {
//   follower    User @relation("follower", fields: [followerId], references: [id])
//   followerId  Int
//   following   User @relation("following", fields: [followingId], references: [id])
//   followingId Int

//   @@id([followerId, followingId])
// }

model UserSettings {
  id               Int     @id @default(autoincrement())
  user             User    @relation(fields: [userId], references: [id])
  userId           Int     @unique
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  theme            String  @default("system")
  language         String  @default("en")
}

model Friend {
  id Int @id @default(autoincrement())

  status FriendRequestStatus @default(PENDING)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id        Int                 @id @default(autoincrement())
  status    FriendRequestStatus @default(PENDING)
  // status2   FriendshipStatus    @default(PENDING)
  userId    Int
  user      User                @relation("SentFriendRequests", fields: [userId], references: [id])
  friendId  Int
  friend    User                @relation("ReceivedFriendRequests", fields: [friendId], references: [id])
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

// model Game {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   // user      User     @relation("Games", fields: [userId], references: [id])
//   matchId   Int
//   // match     Match    @relation("Games", fields: [matchId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Match     Match    @relation(fields: [matchId], references: [id])
// }

// model Match {
//   id        Int      @id @default(autoincrement())
//   winnerId  Int
//   // winner    User     @relation("MatchHistory", fields: [winnerId], references: [id])
//   loserId   Int
//   // loser     User     @relation("MatchHistory", fields: [loserId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Game      Game[]
// }

// model MatchHistory {
//   id        Int      @id @default(autoincrement())
//   winnerId  Int
//   // winner    User     @relation("MatchHistory", fields: [winnerId], references: [id])
//   loserId   Int
//   // loser     User     @relation("MatchHistory", fields: [loserId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Channel {
//   id        Int      @id @default(autoincrement())
//   name      String
//   isPrivate Boolean  @default(false)
//   password  String?
//   ownerId   Int
//   // owner     User     @relation("Channels", fields: [ownerId], references: [id])
//   // members   User[]
//   // messages  Message[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Message {
//   id        Int      @id @default(autoincrement())
//   content   String
//   authorId  Int
//   // author      User     @relation("Messages", fields: [authorId], references: [id])
//   channelId Int
//   // channel   Channel  @relation("Messages", fields: [channelId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Notification {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   // user      User     @relation("Notifications", fields: [userId], references: [id])
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model UserSettings {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   // user      User     @relation("UserSettings", fields: [userId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Chat {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   // user      User     @relation("Chats", fields: [userId], references: [id])
//   channelId Int
//   // channel   Channel  @relation("Chats", fields: [channelId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Achievement {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserAchievement {
  id            Int      @id @default(autoincrement())
  userId        Int
  achievementId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// ---- ENUMS ----
enum Status {
  ONLINE
  OFFLINE
  IDLE
  DONOTDISTURB
  INVISIBLE
  INGAME
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum GameStatus {
  PENDING
  INPROGRESS
  FINISHED
}

enum MatchStatus {
  PENDING
  INPROGRESS
  FINISHED
}

enum ChannelType {
  PUBLIC
  PRIVATE
}

enum NotificationType {
  FRIENDREQUEST
  MATCH
  MESSAGE
  OTHER
}

enum Rank {
  UNRANKED
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  MASTER
  GRANDMASTER
}

enum Role {
  USER
  ADMIN
}

enum inviteType {
  FRIEND
  CHANNEL
  GAME
}

enum inviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}
