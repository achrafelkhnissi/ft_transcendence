// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id                     Int             @id @default(autoincrement())
  username               String?         @unique
  email                  String          @unique
  phoneNumber            String?         @unique
  avatar                 String?         @default("https://i.imgur.com/6VBx3io.png")
  url                    String          @unique
  status                 Status?         @default(ONLINE)
  settings               UserSettings?
  friendRequestsSent     FriendRequest[] @relation("SentFriendRequests")
  friendRequestsReceived FriendRequest[] @relation("ReceivedFriendRequests")
  notificationsSent      Notification[]  @relation("SentNotifications")
  notificationsReceived  Notification[]  @relation("ReceivedNotifications")

  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")

  stats UserStats?

  chat  Chat[] @relation("Users")
  admin Chat[] @relation("Admins")
  owner Chat[] @relation("Owner")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id              Int              @id @default(autoincrement())
  read            Boolean          @default(false)
  type            NotificationType
  senderUsername  String
  senderAvatar    String
  senderId        Int
  sender          User             @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId      Int
  receiver        User             @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
  friendRequestId Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([type, senderId, receiverId])
}

model UserSettings {
  id               Int     @id @default(autoincrement())
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int     @unique
  twoFactorEnabled Boolean @default(false)
  verified         Boolean @default(false)
  // theme            String  @default("system")
  // language         String  @default("en")
}

model FriendRequest {
  id               Int              @id @default(autoincrement())
  friendshipStatus FriendshipStatus @default(PENDING)
  senderId         Int
  sender           User             @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId       Int
  receiver         User             @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([senderId, receiverId])
}

model UserStats {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wins      Int      @default(0)
  losses    Int      @default(0)
  level     Int      @default(0)
  exp       Int      @default(0)
  reatedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         Int    @id @default(autoincrement())
  content    String
  chatId     Int
  Chat       Chat   @relation(fields: [chatId], references: [id])
  senderId   Int
  sender     User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade) // TODO: Do we need to delete messages when a user is deleted?
  receiverId Int
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// A Chat is a conversation between two or more users
model Chat {
  id       Int       @id @default(autoincrement())
  type     ChatType  @default(PUBLIC)
  password String?   @unique
  ownerId  Int
  owner    User      @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  admins   User[]    @relation("Admins")
  users    User[]    @relation("Users")
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Achievement {
//   id              Int               @id @default(autoincrement())
//   name            String
//   description     String
//   image           String
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime          @updatedAt
// }

// model UserAchievement {
//   id            Int         @id @default(autoincrement())
//   userId        Int
//   achievementId Int
//   achievement   Achievement @relation(fields: [achievementId], references: [id])
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt
//   User          User        @relation(fields: [userId], references: [id])
// }

// ---- ENUMS ----
enum Status {
  ONLINE
  OFFLINE
  IDLE
  DONOTDISTURB
  INVISIBLE
  INGAME
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum GameStatus {
  PENDING
  INPROGRESS
  FINISHED
}

enum MatchStatus {
  PENDING
  INPROGRESS
  FINISHED
}

enum ChatType {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum NotificationType {
  FRIEND_REQUEST
  MATCH
  MESSAGE
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum inviteType {
  FRIEND
  CHANNEL
  GAME
}

enum inviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}
